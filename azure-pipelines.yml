# Copyright RenÃ© Ferdinand Rivera Morell 2019-2020
# Distributed under the Boost Software License, Version 1.0.
# (See accompanying file LICENSE.txt or copy at
# http://www.boost.org/LICENSE_1_0.txt)

trigger:
  branches:
    include:
    - develop
    - release
    - feature/*
    exclude:
    - gh-pages
  paths:
    exclude:
    - .circleci/*
    - .drone.star
    - .github/workflows/*
    - .semaphore/*
    - .travis.yml
    - appveyor.yml
pr:
  branches:
    include:
    - develop

stages:

- stage: Test
  jobs:

  - job: 'Linux'
    strategy:
      matrix:
        GCC 10: {
          CXX: g++-10, PACKAGES: g++-10, VM_IMAGE: 'ubuntu-18.04',
          TOOLSET: gcc, CXXSTD: "11,14,17,20" }
        GCC 9: {
          CXX: g++-9, PACKAGES: g++-9, VM_IMAGE: 'ubuntu-18.04',
          TOOLSET: gcc, CXXSTD: "11,14,17,2a" }
        GCC 8: {
          CXX: g++-8, PACKAGES: g++-8, VM_IMAGE: 'ubuntu-18.04',
          TOOLSET: gcc, CXXSTD: "11,14,17,2a" }
        GCC 7: {
          CXX: g++-7, PACKAGES: g++-7, VM_IMAGE: 'ubuntu-18.04',
          TOOLSET: gcc, CXXSTD: "11,14,17" }
        GCC 6: {
          CXX: g++-6, PACKAGES: g++-6, VM_IMAGE: 'ubuntu-18.04',
          TOOLSET: gcc, CXXSTD: "11,14,17" }
        GCC 5: {
          CXX: g++-5, PACKAGES: g++-5, VM_IMAGE: 'ubuntu-18.04',
          TOOLSET: gcc, CXXSTD: "11,14" }
        GCC 4.9: {
          CXX: g++-4.9, PACKAGES: g++-4.9, VM_IMAGE: 'ubuntu-16.04',
          TOOLSET: gcc, CXXSTD: "11" }
        GCC 4.8: {
          CXX: g++-4.8, PACKAGES: g++-4.8, VM_IMAGE: 'ubuntu-16.04',
          TOOLSET: gcc, CXXSTD: "11" }
        Clang 11: {
          CXX: clang++-11, PACKAGES: clang-11, LLVM_OS: bionic, LLVM_VER: 11, VM_IMAGE: 'ubuntu-20.04',
          TOOLSET: clang, CXXSTD: "11,14,17,20" }
        Clang 10: {
          CXX: clang++-10, PACKAGES: clang-10, LLVM_OS: bionic, LLVM_VER: 10, VM_IMAGE: 'ubuntu-18.04',
          TOOLSET: clang, CXXSTD: "11,14,17,20" }
        Clang 9: {
          CXX: clang++-9, PACKAGES: clang-9, LLVM_OS: bionic, LLVM_VER: 9, VM_IMAGE: 'ubuntu-18.04',
          TOOLSET: clang, CXXSTD: "11,14,17,2a" }
        Clang 8: {
          CXX: clang++-8, PACKAGES: clang-8, LLVM_OS: bionic, LLVM_VER: 8, VM_IMAGE: 'ubuntu-18.04',
          TOOLSET: clang, CXXSTD: "11,14,17,2a" }
        Clang 7: {
          CXX: clang++-7, PACKAGES: clang-7, LLVM_OS: bionic, LLVM_VER: 7, VM_IMAGE: 'ubuntu-18.04',
          TOOLSET: clang, CXXSTD: "11,14,17,2a" }
        Clang 6.0: {
          CXX: clang++-6.0, PACKAGES: clang-6.0, LLVM_OS: bionic, LLVM_VER: 6.0, VM_IMAGE: 'ubuntu-18.04',
          TOOLSET: clang, CXXSTD: "11,14,17,2a" }
        Clang 5.0: {
          CXX: clang++-5.0, PACKAGES: clang-5.0, LLVM_OS: bionic, LLVM_VER: 5.0, VM_IMAGE: 'ubuntu-18.04',
          TOOLSET: clang, CXXSTD: "11,14,17" }
        Clang 4.0: {
          CXX: clang++-4.0, PACKAGES: clang-4.0, LLVM_OS: xenial, LLVM_VER: 4.0, VM_IMAGE: 'ubuntu-16.04',
          TOOLSET: clang, CXXSTD: "11,14" }
        Clang 3.9: {
          CXX: clang++-3.9, PACKAGES: clang-3.9, LLVM_OS: xenial, LLVM_VER: 3.9, VM_IMAGE: 'ubuntu-16.04',
          TOOLSET: clang, CXXSTD: "11" }
        Clang 3.8: {
          CXX: clang++-3.8, PACKAGES: clang-3.8, LLVM_OS: xenial, LLVM_VER: 3.8, VM_IMAGE: 'ubuntu-16.04',
          TOOLSET: clang, CXXSTD: "11" }
    pool:
      vmImage: $(VM_IMAGE)
    steps:
    - bash: |
        set -e
        uname -a
        ./.ci/linux-cxx-install.sh
      displayName: Install Toolset
    - bash: |
        set -e
        pushd ..
        wget "https://github.com/boostorg/build/archive/develop.zip" -O b2.zip
        unzip b2.zip
        cd build-develop
        CXX= ./bootstrap.sh
        CXX= sudo ./b2 install b2-install-layout=portable --prefix=/usr/bin
        popd
        CXX_PATH=`which ${CXX}`
        echo "using ${TOOLSET} : : ${CXX_PATH} ;" > ${HOME}/user-config.jam
      displayName: Install B2
    - bash: |
        set -e
        b2 toolset=${TOOLSET} cxxstd=${CXXSTD} ${B2_ARGS} examples
      displayName: Test

  - job: 'Xcode'
    strategy:
      matrix:
        Xcode 12.2: {
          CXX: clang++, VM_IMAGE: 'macOS-10.15', XCODE_VERSION: "12.2",
          TOOLSET: clang, CXXSTD: "11,14,17,2a" }
        Xcode 12.1.1: {
          CXX: clang++, VM_IMAGE: 'macOS-10.15', XCODE_VERSION: "12.1.1",
          TOOLSET: clang, CXXSTD: "11,14,17,2a" }
        Xcode 11.7: {
          CXX: clang++, VM_IMAGE: 'macOS-10.15', XCODE_VERSION: "11.7",
          TOOLSET: clang, CXXSTD: "11,14,17,2a" }
        Xcode 11.6: {
          CXX: clang++, VM_IMAGE: 'macOS-10.15', XCODE_VERSION: "11.6",
          TOOLSET: clang, CXXSTD: "11,14,17,2a" }
        Xcode 11.5: {
          CXX: clang++, VM_IMAGE: 'macOS-10.15', XCODE_VERSION: "11.5",
          TOOLSET: clang, CXXSTD: "11,14,17,2a" }
        Xcode 11.4: {
          CXX: clang++, VM_IMAGE: 'macOS-10.15', XCODE_VERSION: "11.4",
          TOOLSET: clang, CXXSTD: "11,14,17,2a" }
        Xcode 11.3.1: {
          CXX: clang++, VM_IMAGE: 'macOS-10.15', XCODE_VERSION: "11.3.1",
          TOOLSET: clang, CXXSTD: "11,14,17,2a" }
        Xcode 11.2.1: {
          CXX: clang++, VM_IMAGE: 'macOS-10.15', XCODE_VERSION: "11.2.1",
          TOOLSET: clang, CXXSTD: "11,14,17,2a" }
        Xcode 11.1: {
          CXX: clang++, VM_IMAGE: 'macOS-10.15', XCODE_VERSION: "11.1",
          TOOLSET: clang, CXXSTD: "11,14,17,2a" }
        Xcode 10.3: {
          CXX: clang++, VM_IMAGE: 'macOS-10.14', XCODE_VERSION: "10.3",
          TOOLSET: clang, CXXSTD: "11,14,17,2a" }
        Xcode 10.2.1: {
          CXX: clang++, VM_IMAGE: 'macOS-10.14', XCODE_VERSION: "10.2.1",
          TOOLSET: clang, CXXSTD: "11,14,17,2a" }
        Xcode 10.1: {
          CXX: clang++, VM_IMAGE: 'macOS-10.14', XCODE_VERSION: "10.1",
          TOOLSET: clang, CXXSTD: "11,14,17,2a" }
    pool:
      vmImage: $(VM_IMAGE)
    steps:
    - bash: |
        set -e
        uname -a
        export 'XCODE_INSTALL_USER=$(DEV_APPLE_USER)'
        export 'XCODE_INSTALL_PASSWORD=$(DEV_APPLE_PASSWORD)'
        ./.ci/macos-xcode-install.sh
        ${CXX} --version
      displayName: Install Toolset
    - bash: |
        set -e
        pushd ..
        wget "https://github.com/boostorg/build/archive/develop.zip" -O b2.zip
        unzip b2.zip
        cd build-develop
        CXX= ./bootstrap.sh clang
        CXX= sudo ./b2 install b2-install-layout=portable --prefix=/usr/local/bin
        popd
        CXX_PATH=`which ${CXX}`
        echo "using ${TOOLSET} : : ${CXX_PATH} ;" > ${HOME}/user-config.jam
      displayName: Install B2
    - bash: |
        set -e
        b2 toolset=${TOOLSET} cxxstd=${CXXSTD} examples
      displayName: Test

  - job: 'Visual_Studio'
    strategy:
      matrix:
        VS 2019: {
          VSWHERE_VERSION: '[16.0,17.0)', CXX: cl.exe, PLATFORM: x64, VM_IMAGE: 'windows-2019',
          TOOLSET: msvc, TOOLSET_VERSION: '14.2', CXXSTD: "latest" }
        # VS 2017: {
        #   VSWHERE_VERSION: '[15.0,16.0)', CXX: cl.exe, PLATFORM: x64, VM_IMAGE: 'vs2017-win2016',
        #   TOOLSET: msvc, TOOLSET_VERSION: '14.1', CXXSTD: "latest" }
    pool:
      vmImage: $(VM_IMAGE)
    steps:
    - script: |
        choco install vswhere
      displayName: Install
    - script: |
        cd %BUILD_SOURCESDIRECTORY%/..
        curl "https://github.com/boostorg/build/archive/develop.zip" -L -o b2.zip
      displayName: Download B2
    - task: ExtractFiles@1
      inputs:
        archiveFilePatterns: $(Build.SourcesDirectory)/../b2.zip
        destinationFolder: $(Build.SourcesDirectory)/..
        cleanDestinationFolder: false
      displayName: Extract B2
    - script: |
        echo using %TOOLSET% ^: %TOOLSET_VERSION% ^; > %HOMEDRIVE%%HOMEPATH%/user-config.jam
        cd %BUILD_SOURCESDIRECTORY%/../build-develop
        cmd.exe /c bootstrap.bat
        b2.exe install b2-install-layout=portable --prefix=%BUILD_SOURCESDIRECTORY%/../bin
      displayName: Install B2
    - script: |
        %BUILD_SOURCESDIRECTORY%/../bin/b2.exe toolset=%TOOLSET% cxxstd=%CXXSTD% %B2_ARGS% examples
      displayName: Test

  - job: 'MinGW'
    strategy:
      matrix:
        MinGW 8.1.0: { VM_IMAGE: 'vs2017-win2016',
          TOOLSET: gcc }
    pool:
      vmImage: $(VM_IMAGE)
    steps:
    - script: |
        cd %BUILD_SOURCESDIRECTORY%/..
        curl "https://github.com/boostorg/build/archive/develop.zip" -L -o b2.zip
      displayName: Download B2
    - task: ExtractFiles@1
      inputs:
        archiveFilePatterns: $(Build.SourcesDirectory)/../b2.zip
        destinationFolder: $(Build.SourcesDirectory)/..
        cleanDestinationFolder: false
      displayName: Extract B2
    - script: |
        echo using %TOOLSET% ^: %TOOLSET_VERSION% ^; > %HOMEDRIVE%%HOMEPATH%/user-config.jam
        cd %BUILD_SOURCESDIRECTORY%/../build-develop
        cmd.exe /c bootstrap.bat
        b2.exe install b2-install-layout=portable --prefix=%BUILD_SOURCESDIRECTORY%/../bin
      displayName: Install B2
    - script: |
        cd %BUILD_SOURCESDIRECTORY%/tests
        %BUILD_SOURCESDIRECTORY%/../bin/b2.exe --debug-configuration toolset=%TOOLSET% examples
      displayName: Test
